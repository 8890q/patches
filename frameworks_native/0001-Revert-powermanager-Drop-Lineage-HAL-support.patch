From 4d882daf2cc015937c186a7eb6b9b4a57388671f Mon Sep 17 00:00:00 2001
From: ivanmeler <i_ivan@windowslive.com>
Date: Wed, 9 Mar 2022 18:59:00 +0000
Subject: [PATCH] Revert "powermanager: Drop Lineage HAL support"

This reverts commit 2082de2cf32e26844a27f53aaca170f2f2eb6577.
---
 include/powermanager/PowerHalController.h    |  6 +++
 include/powermanager/PowerHalLoader.h        |  5 ++
 include/powermanager/PowerHalWrapper.h       | 24 ++++++++++
 services/powermanager/Android.bp             |  1 +
 services/powermanager/PowerHalController.cpp | 31 +++++++++++++
 services/powermanager/PowerHalLoader.cpp     | 16 +++++++
 services/powermanager/PowerHalWrapper.cpp    | 48 ++++++++++++++++++++
 7 files changed, 131 insertions(+)

diff --git a/include/powermanager/PowerHalController.h b/include/powermanager/PowerHalController.h
index 71a36d09e5..5e7a525bf7 100644
--- a/include/powermanager/PowerHalController.h
+++ b/include/powermanager/PowerHalController.h
@@ -23,6 +23,7 @@
 #include <android/hardware/power/IPowerHintSession.h>
 #include <android/hardware/power/Mode.h>
 #include <powermanager/PowerHalWrapper.h>
+#include <vendor/lineage/power/IPower.h>
 
 namespace android {
 
@@ -37,6 +38,7 @@ public:
     virtual ~HalConnector() = default;
 
     virtual std::unique_ptr<HalWrapper> connect();
+    virtual std::unique_ptr<HalWrapper> connectLineage();
     virtual void reset();
 };
 
@@ -61,17 +63,21 @@ public:
             int32_t tgid, int32_t uid, const std::vector<int32_t>& threadIds,
             int64_t durationNanos) override;
     virtual HalResult<int64_t> getHintSessionPreferredRate() override;
+    virtual HalResult<int> getFeature(vendor::lineage::power::Feature) override;
 
 private:
     std::mutex mConnectedHalMutex;
+    std::mutex mConnectedLineageHalMutex;
     std::unique_ptr<HalConnector> mHalConnector;
 
     // Shared pointers to keep global pointer and allow local copies to be used in
     // different threads
     std::shared_ptr<HalWrapper> mConnectedHal GUARDED_BY(mConnectedHalMutex) = nullptr;
+    std::shared_ptr<HalWrapper> mConnectedLineageHal GUARDED_BY(mConnectedLineageHalMutex) = nullptr;
     const std::shared_ptr<HalWrapper> mDefaultHal = std::make_shared<EmptyHalWrapper>();
 
     std::shared_ptr<HalWrapper> initHal();
+    std::shared_ptr<HalWrapper> initLineageHal();
     template <typename T>
     HalResult<T> processHalResult(HalResult<T> result, const char* functionName);
 };
diff --git a/include/powermanager/PowerHalLoader.h b/include/powermanager/PowerHalLoader.h
index ed6f6f35f5..18dfb50cb4 100644
--- a/include/powermanager/PowerHalLoader.h
+++ b/include/powermanager/PowerHalLoader.h
@@ -20,6 +20,7 @@
 #include <android-base/thread_annotations.h>
 #include <android/hardware/power/1.1/IPower.h>
 #include <android/hardware/power/IPower.h>
+#include <vendor/lineage/power/IPower.h>
 
 namespace android {
 
@@ -29,15 +30,19 @@ namespace power {
 class PowerHalLoader {
 public:
     static void unloadAll();
+    static void unloadLineage();
     static sp<hardware::power::IPower> loadAidl();
     static sp<hardware::power::V1_0::IPower> loadHidlV1_0();
     static sp<hardware::power::V1_1::IPower> loadHidlV1_1();
+    static sp<vendor::lineage::power::IPower> loadLineageAidl();
 
 private:
     static std::mutex gHalMutex;
+    static std::mutex gLineageHalMutex;
     static sp<hardware::power::IPower> gHalAidl GUARDED_BY(gHalMutex);
     static sp<hardware::power::V1_0::IPower> gHalHidlV1_0 GUARDED_BY(gHalMutex);
     static sp<hardware::power::V1_1::IPower> gHalHidlV1_1 GUARDED_BY(gHalMutex);
+    static sp<vendor::lineage::power::IPower> gHalLineageAidl GUARDED_BY(gLineageHalMutex);
 
     static sp<hardware::power::V1_0::IPower> loadHidlV1_0Locked()
             EXCLUSIVE_LOCKS_REQUIRED(gHalMutex);
diff --git a/include/powermanager/PowerHalWrapper.h b/include/powermanager/PowerHalWrapper.h
index 2c6eacbfaa..d455b74564 100644
--- a/include/powermanager/PowerHalWrapper.h
+++ b/include/powermanager/PowerHalWrapper.h
@@ -23,6 +23,7 @@
 #include <android/hardware/power/IPower.h>
 #include <android/hardware/power/IPowerHintSession.h>
 #include <android/hardware/power/Mode.h>
+#include <vendor/lineage/power/IPower.h>
 
 namespace android {
 
@@ -123,6 +124,7 @@ public:
             int32_t tgid, int32_t uid, const std::vector<int32_t>& threadIds,
             int64_t durationNanos) = 0;
     virtual HalResult<int64_t> getHintSessionPreferredRate() = 0;
+    virtual HalResult<int> getFeature(vendor::lineage::power::Feature feature) = 0;
 };
 
 // Empty Power HAL wrapper that ignores all api calls.
@@ -137,6 +139,7 @@ public:
             int32_t tgid, int32_t uid, const std::vector<int32_t>& threadIds,
             int64_t durationNanos) override;
     virtual HalResult<int64_t> getHintSessionPreferredRate() override;
+    virtual HalResult<int> getFeature(vendor::lineage::power::Feature feature) override;
 };
 
 // Wrapper for the HIDL Power HAL v1.0.
@@ -152,6 +155,7 @@ public:
             int32_t tgid, int32_t uid, const std::vector<int32_t>& threadIds,
             int64_t durationNanos) override;
     virtual HalResult<int64_t> getHintSessionPreferredRate() override;
+    virtual HalResult<int> getFeature(vendor::lineage::power::Feature feature) override;
 
 protected:
     virtual HalResult<void> sendPowerHint(hardware::power::V1_0::PowerHint hintId, uint32_t data);
@@ -190,6 +194,7 @@ public:
             int32_t tgid, int32_t uid, const std::vector<int32_t>& threadIds,
             int64_t durationNanos) override;
     virtual HalResult<int64_t> getHintSessionPreferredRate() override;
+    virtual HalResult<int> getFeature(vendor::lineage::power::Feature feature) override;
 
 private:
     // Control access to the boost and mode supported arrays.
@@ -208,6 +213,25 @@ private:
             mModeSupportedArray GUARDED_BY(mModeMutex) = {HalSupport::UNKNOWN};
 };
 
+// Wrapper for the Lineage AIDL Power HAL.
+class LineageAidlHalWrapper : public HalWrapper {
+public:
+    explicit LineageAidlHalWrapper(sp<vendor::lineage::power::IPower> handle) : mHandle(std::move(handle)) {}
+    ~LineageAidlHalWrapper() = default;
+
+    virtual HalResult<void> setBoost(hardware::power::Boost boost, int32_t durationMs) override;
+    virtual HalResult<void> setMode(hardware::power::Mode mode, bool enabled) override;
+    virtual HalResult<sp<hardware::power::IPowerHintSession>> createHintSession(
+            int32_t tgid, int32_t uid, const std::vector<int32_t>& threadIds,
+            int64_t durationNanos) override;
+    virtual HalResult<int64_t> getHintSessionPreferredRate() override;
+    virtual HalResult<int> getFeature(vendor::lineage::power::Feature feature) override;
+
+private:
+    sp<vendor::lineage::power::IPower> mHandle;
+};
+
+
 }; // namespace power
 
 }; // namespace android
diff --git a/services/powermanager/Android.bp b/services/powermanager/Android.bp
index d828aa97a0..e27e620729 100644
--- a/services/powermanager/Android.bp
+++ b/services/powermanager/Android.bp
@@ -39,6 +39,7 @@ cc_library_shared {
         "android.hardware.power@1.0",
         "android.hardware.power@1.1",
         "android.hardware.power-V2-cpp",
+        "vendor.lineage.power-V1-cpp",
     ],
 
     cflags: [
diff --git a/services/powermanager/PowerHalController.cpp b/services/powermanager/PowerHalController.cpp
index 8c225d5d02..7a1b5f7c0a 100644
--- a/services/powermanager/PowerHalController.cpp
+++ b/services/powermanager/PowerHalController.cpp
@@ -25,6 +25,7 @@
 #include <utils/Log.h>
 
 using namespace android::hardware::power;
+namespace LineageAidl = vendor::lineage::power;
 
 namespace android {
 
@@ -48,14 +49,24 @@ std::unique_ptr<HalWrapper> HalConnector::connect() {
     return nullptr;
 }
 
+std::unique_ptr<HalWrapper> HalConnector::connectLineage() {
+    sp<LineageAidl::IPower> halLineageAidl = PowerHalLoader::loadLineageAidl();
+    if (halLineageAidl) {
+        return std::make_unique<LineageAidlHalWrapper>(halLineageAidl);
+    }
+    return nullptr;
+}
+
 void HalConnector::reset() {
     PowerHalLoader::unloadAll();
+    PowerHalLoader::unloadLineage();
 }
 
 // -------------------------------------------------------------------------------------------------
 
 void PowerHalController::init() {
     initHal();
+    initLineageHal();
 }
 
 // Check validity of current handle to the power HAL service, and create a new
@@ -72,6 +83,20 @@ std::shared_ptr<HalWrapper> PowerHalController::initHal() {
     return mConnectedHal;
 }
 
+// Check validity of current handle to the Lineage power HAL service, and create a new
+// one if necessary.
+std::shared_ptr<HalWrapper> PowerHalController::initLineageHal() {
+    std::lock_guard<std::mutex> lock(mConnectedLineageHalMutex);
+    if (mConnectedLineageHal == nullptr) {
+        mConnectedLineageHal = mHalConnector->connectLineage();
+        if (mConnectedLineageHal == nullptr) {
+            // Unable to connect to Lineage Power HAL service. Fallback to default.
+            return mDefaultHal;
+        }
+    }
+    return mConnectedLineageHal;
+}
+
 // Check if a call to Power HAL function failed; if so, log the failure and
 // invalidate the current Power HAL handle.
 template <typename T>
@@ -111,6 +136,12 @@ HalResult<int64_t> PowerHalController::getHintSessionPreferredRate() {
     return processHalResult(result, "getHintSessionPreferredRate");
 }
 
+HalResult<int> PowerHalController::getFeature(LineageAidl::Feature feature) {
+    std::shared_ptr<HalWrapper> handle = initLineageHal();
+    auto result = handle->getFeature(feature);
+    return processHalResult(result, "getFeature");
+}
+
 } // namespace power
 
 } // namespace android
diff --git a/services/powermanager/PowerHalLoader.cpp b/services/powermanager/PowerHalLoader.cpp
index 1f1b43a607..e5c636344d 100644
--- a/services/powermanager/PowerHalLoader.cpp
+++ b/services/powermanager/PowerHalLoader.cpp
@@ -22,8 +22,10 @@
 #include <hardware/power.h>
 #include <hardware_legacy/power.h>
 #include <powermanager/PowerHalLoader.h>
+#include <vendor/lineage/power/IPower.h>
 
 using namespace android::hardware::power;
+namespace LineageAidl = vendor::lineage::power;
 
 namespace android {
 
@@ -52,9 +54,11 @@ sp<T> loadHal(bool& exists, sp<T>& hal, F& loadFn, const char* halName) {
 // -------------------------------------------------------------------------------------------------
 
 std::mutex PowerHalLoader::gHalMutex;
+std::mutex PowerHalLoader::gLineageHalMutex;
 sp<IPower> PowerHalLoader::gHalAidl = nullptr;
 sp<V1_0::IPower> PowerHalLoader::gHalHidlV1_0 = nullptr;
 sp<V1_1::IPower> PowerHalLoader::gHalHidlV1_1 = nullptr;
+sp<LineageAidl::IPower> PowerHalLoader::gHalLineageAidl = nullptr;
 
 void PowerHalLoader::unloadAll() {
     std::lock_guard<std::mutex> lock(gHalMutex);
@@ -63,6 +67,11 @@ void PowerHalLoader::unloadAll() {
     gHalHidlV1_1 = nullptr;
 }
 
+void PowerHalLoader::unloadLineage() {
+    std::lock_guard<std::mutex> lock(gLineageHalMutex);
+    gHalLineageAidl = nullptr;
+}
+
 sp<IPower> PowerHalLoader::loadAidl() {
     std::lock_guard<std::mutex> lock(gHalMutex);
     static bool gHalExists = true;
@@ -82,6 +91,13 @@ sp<V1_1::IPower> PowerHalLoader::loadHidlV1_1() {
     return loadHal<V1_1::IPower>(gHalExists, gHalHidlV1_1, loadFn, "HIDL v1.1");
 }
 
+sp<LineageAidl::IPower> PowerHalLoader::loadLineageAidl() {
+    std::lock_guard<std::mutex> lock(gLineageHalMutex);
+    static bool gHalExists = true;
+    static auto loadFn = []() { return waitForVintfService<LineageAidl::IPower>(); };
+    return loadHal<LineageAidl::IPower>(gHalExists, gHalLineageAidl, loadFn, "Lineage AIDL");
+}
+
 sp<V1_0::IPower> PowerHalLoader::loadHidlV1_0Locked() {
     static bool gHalExists = true;
     static auto loadFn = []() { return V1_0::IPower::getService(); };
diff --git a/services/powermanager/PowerHalWrapper.cpp b/services/powermanager/PowerHalWrapper.cpp
index d74bd23a8d..49659e796e 100644
--- a/services/powermanager/PowerHalWrapper.cpp
+++ b/services/powermanager/PowerHalWrapper.cpp
@@ -27,6 +27,7 @@ using namespace android::hardware::power;
 namespace V1_0 = android::hardware::power::V1_0;
 namespace V1_1 = android::hardware::power::V1_1;
 namespace Aidl = android::hardware::power;
+namespace LineageAidl = vendor::lineage::power;
 
 namespace android {
 
@@ -104,6 +105,11 @@ HalResult<int64_t> EmptyHalWrapper::getHintSessionPreferredRate() {
     return HalResult<int64_t>::unsupported();
 }
 
+HalResult<int> EmptyHalWrapper::getFeature(LineageAidl::Feature) {
+    ALOGV("Skipped getFeature because Power HAL not available");
+    return HalResult<int>::unsupported();
+}
+
 // -------------------------------------------------------------------------------------------------
 
 HalResult<void> HidlHalWrapperV1_0::setBoost(Boost boost, int32_t durationMs) {
@@ -164,6 +170,11 @@ HalResult<int64_t> HidlHalWrapperV1_0::getHintSessionPreferredRate() {
     return HalResult<int64_t>::unsupported();
 }
 
+HalResult<int> HidlHalWrapperV1_0::getFeature(LineageAidl::Feature) {
+    ALOGV("Skipped getFeature because Power HAL not available");
+    return HalResult<int>::unsupported();
+}
+
 // -------------------------------------------------------------------------------------------------
 
 HalResult<void> HidlHalWrapperV1_1::sendPowerHint(V1_0::PowerHint hintId, uint32_t data) {
@@ -248,6 +259,43 @@ HalResult<int64_t> AidlHalWrapper::getHintSessionPreferredRate() {
     return HalResult<int64_t>::fromStatus(result, rate);
 }
 
+HalResult<int> AidlHalWrapper::getFeature(LineageAidl::Feature) {
+    ALOGV("Skipped getFeature because Power HAL not available");
+    return HalResult<int>::unsupported();
+}
+
+// -------------------------------------------------------------------------------------------------
+
+HalResult<void> LineageAidlHalWrapper::setBoost(Boost boost, int32_t durationMs) {
+    ALOGV("Skipped setBoost %s with duration %dms because Power HAL not available",
+          toString(boost).c_str(), durationMs);
+    return HalResult<void>::unsupported();
+}
+
+HalResult<void> LineageAidlHalWrapper::setMode(Mode mode, bool enabled) {
+    ALOGV("Skipped setMode %s to %s because Power HAL not available", toString(mode).c_str(),
+          enabled ? "true" : "false");
+    return HalResult<void>::unsupported();
+}
+
+HalResult<sp<Aidl::IPowerHintSession>> LineageAidlHalWrapper::createHintSession(
+        int32_t, int32_t, const std::vector<int32_t>& threadIds, int64_t) {
+    ALOGV("Skipped createHintSession(task num=%zu) because Power HAL not available",
+          threadIds.size());
+    return HalResult<sp<Aidl::IPowerHintSession>>::unsupported();
+}
+
+HalResult<int64_t> LineageAidlHalWrapper::getHintSessionPreferredRate() {
+    ALOGV("Skipped getHintSessionPreferredRate because Power HAL not available");
+    return HalResult<int64_t>::unsupported();
+}
+
+HalResult<int> LineageAidlHalWrapper::getFeature(LineageAidl::Feature feature) {
+    int value = -1;
+    auto ret = mHandle->getFeature(feature, &value);
+    return HalResult<int>::fromStatus(ret, value);
+}
+
 // -------------------------------------------------------------------------------------------------
 
 } // namespace power
-- 
2.25.1

