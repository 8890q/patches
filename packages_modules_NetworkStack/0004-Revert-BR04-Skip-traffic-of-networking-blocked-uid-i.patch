From edebe3c5110a2d310329e427f2358ff00e784c18 Mon Sep 17 00:00:00 2001
From: Yaroslav Zviezda <acroreiser@gmail.com>
Date: Tue, 2 Apr 2024 23:47:42 +0300
Subject: [PATCH 4/8] Revert "[BR04] Skip traffic of networking-blocked uid in
 data stall detection"

This reverts commit db9c872f04ac44fff310262ad4961512ea8cbc6a.
---
 .../netlink/TcpSocketTracker.java             |  35 ------
 .../networkstack/util/NetworkStackUtils.java  |   7 --
 .../netlink/TcpSocketTrackerTest.java         | 110 +++---------------
 3 files changed, 16 insertions(+), 136 deletions(-)

diff --git a/src/com/android/networkstack/netlink/TcpSocketTracker.java b/src/com/android/networkstack/netlink/TcpSocketTracker.java
index 87621821..4b66c0ae 100644
--- a/src/com/android/networkstack/netlink/TcpSocketTracker.java
+++ b/src/com/android/networkstack/netlink/TcpSocketTracker.java
@@ -27,14 +27,12 @@ import static android.system.OsConstants.AF_INET6;
 import static android.system.OsConstants.SOL_SOCKET;
 import static android.system.OsConstants.SO_SNDTIMEO;
 
-import static com.android.net.module.util.FeatureVersions.FEATURE_IS_UID_NETWORKING_BLOCKED;
 import static com.android.net.module.util.NetworkStackConstants.DNS_OVER_TLS_PORT;
 import static com.android.net.module.util.netlink.NetlinkConstants.NLMSG_DONE;
 import static com.android.net.module.util.netlink.NetlinkConstants.SOCKDIAG_MSG_HEADER_SIZE;
 import static com.android.net.module.util.netlink.NetlinkConstants.SOCK_DIAG_BY_FAMILY;
 import static com.android.net.module.util.netlink.NetlinkUtils.DEFAULT_RECV_BUFSIZE;
 import static com.android.net.module.util.netlink.NetlinkUtils.IO_TIMEOUT_MS;
-import static com.android.networkstack.util.NetworkStackUtils.IGNORE_TCP_INFO_FOR_BLOCKED_UIDS;
 import static com.android.networkstack.util.NetworkStackUtils.SKIP_TCP_POLL_IN_LIGHT_DOZE;
 
 import android.annotation.TargetApi;
@@ -42,7 +40,6 @@ import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.net.ConnectivityManager;
 import android.net.INetd;
 import android.net.LinkProperties;
 import android.net.MarkMaskParcel;
@@ -132,8 +129,6 @@ public class TcpSocketTracker {
     private int mMinPacketsThreshold = DEFAULT_DATA_STALL_MIN_PACKETS_THRESHOLD;
     private int mTcpPacketsFailRateThreshold = DEFAULT_TCP_PACKETS_FAIL_PERCENTAGE;
 
-    // TODO: Remove doze mode solution since uid networking blocked traffic is filtered out by
-    //  the info provided by bpf maps.
     private final Object mDozeModeLock = new Object();
     @GuardedBy("mDozeModeLock")
     private boolean mInDozeMode = false;
@@ -146,8 +141,6 @@ public class TcpSocketTracker {
     private LinkProperties mLinkProperties;
 
     private final boolean mShouldDisableInLightDoze;
-    private final boolean mShouldIgnoreTcpInfoForBlockedUids;
-    private final ConnectivityManager mCm;
 
     @VisibleForTesting
     protected final DeviceConfig.OnPropertiesChangedListener mConfigListener =
@@ -199,7 +192,6 @@ public class TcpSocketTracker {
         mNetwork = network;
         mNetd = mDependencies.getNetd();
         mShouldDisableInLightDoze = mDependencies.shouldDisableInLightDoze();
-        mShouldIgnoreTcpInfoForBlockedUids = mDependencies.shouldIgnoreTcpInfoForBlockedUids();
 
         // If the parcel is null, nothing should be matched which is achieved by the combination of
         // {@code NetlinkUtils#NULL_MASK} and {@code NetlinkUtils#UNKNOWN_MARK}.
@@ -214,7 +206,6 @@ public class TcpSocketTracker {
         }
         mDependencies.addDeviceConfigChangedListener(mConfigListener);
         mDependencies.addDeviceIdleReceiver(mDeviceIdleReceiver, mShouldDisableInLightDoze);
-        mCm = mDependencies.getContext().getSystemService(ConnectivityManager.class);
     }
 
     @Nullable
@@ -261,7 +252,6 @@ public class TcpSocketTracker {
 
             // Append TcpStats based on previous and current socket info.
             final TcpStat stat = new TcpStat();
-            final ArrayList<Integer> skippedBlockedUids = new ArrayList<>();
             mLatestReportedUids.clear();
             for (final SocketInfo newInfo : newSocketInfoList) {
                 final TcpStat diff = calculateLatestPacketsStat(newInfo,
@@ -281,24 +271,11 @@ public class TcpSocketTracker {
                     continue;
                 }
 
-                if (mShouldIgnoreTcpInfoForBlockedUids) {
-                    // TODO: Supports networking blocked by data saver.
-                    final boolean uidBlocked = mCm.isUidNetworkingBlocked(newInfo.uid,
-                            false /* isNetworkMetered */);
-                    if (uidBlocked) {
-                        skippedBlockedUids.add(newInfo.uid);
-                        continue;
-                    }
-                }
-
                 if (diff != null) {
                     mLatestReportedUids.add(newInfo.uid);
                     stat.accumulate(diff);
                 }
             }
-            if (!skippedBlockedUids.isEmpty()) {
-                logd("Skip blocked uids: " + skippedBlockedUids);
-            }
 
             // Calculate mLatestReceiveCount, mSentSinceLastRecv and mLatestPacketFailPercentage.
             mSentSinceLastRecv = (stat.receivedCount == 0)
@@ -749,17 +726,5 @@ public class TcpSocketTracker {
             return SdkLevel.isAtLeastT() && DeviceConfigUtils.isNetworkStackFeatureNotChickenedOut(
                     mContext, SKIP_TCP_POLL_IN_LIGHT_DOZE);
         }
-
-        /**
-         * Get whether the ignore Tcp info for blocked uids is supported. This method should
-         * only be called once in the constructor, to ensure that the code does not need
-         * to deal with flag values changing at runtime.
-         */
-        public boolean shouldIgnoreTcpInfoForBlockedUids() {
-            return SdkLevel.isAtLeastT() && DeviceConfigUtils.isFeatureSupported(
-                    mContext, FEATURE_IS_UID_NETWORKING_BLOCKED)
-                    && DeviceConfigUtils.isNetworkStackFeatureNotChickenedOut(mContext,
-                    IGNORE_TCP_INFO_FOR_BLOCKED_UIDS);
-        }
     }
 }
diff --git a/src/com/android/networkstack/util/NetworkStackUtils.java b/src/com/android/networkstack/util/NetworkStackUtils.java
index 85da4003..3a1c865c 100755
--- a/src/com/android/networkstack/util/NetworkStackUtils.java
+++ b/src/com/android/networkstack/util/NetworkStackUtils.java
@@ -288,13 +288,6 @@ public class NetworkStackUtils {
      */
     public static final String REEVALUATE_WHEN_RESUME = "reevaluate_when_resume";
 
-    /**
-     * Kill switch flag to disable the feature of ignoring Tcp socket info for uids which
-     * networking are blocked.
-     */
-    public static final String IGNORE_TCP_INFO_FOR_BLOCKED_UIDS =
-            "ignore_tcp_info_for_blocked_uids";
-
     static {
         System.loadLibrary("networkstackutilsjni");
     }
diff --git a/tests/unit/src/com/android/networkstack/netlink/TcpSocketTrackerTest.java b/tests/unit/src/com/android/networkstack/netlink/TcpSocketTrackerTest.java
index 05ab50a7..ab9816cf 100644
--- a/tests/unit/src/com/android/networkstack/netlink/TcpSocketTrackerTest.java
+++ b/tests/unit/src/com/android/networkstack/netlink/TcpSocketTrackerTest.java
@@ -33,7 +33,6 @@ import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.doReturn;
-import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -41,7 +40,6 @@ import static org.mockito.Mockito.when;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.net.ConnectivityManager;
 import android.net.INetd;
 import android.net.InetAddresses;
 import android.net.LinkProperties;
@@ -59,7 +57,6 @@ import com.android.modules.utils.build.SdkLevel;
 import com.android.net.module.util.netlink.NetlinkUtils;
 import com.android.net.module.util.netlink.StructNlMsgHdr;
 import com.android.testutils.DevSdkIgnoreRule;
-import com.android.testutils.DevSdkIgnoreRule.IgnoreAfter;
 import com.android.testutils.DevSdkIgnoreRule.IgnoreUpTo;
 
 import libcore.util.HexEncoding;
@@ -121,7 +118,6 @@ public class TcpSocketTrackerTest {
     private static final int TEST_NETID2_FWMARK = 0x1A85;
     private static final int NETID_MASK = 0xffff;
     private static final int TEST_UID1 = 1234;
-    private static final int TEST_UID2 = TEST_UID1 + 1;
     private static final short TEST_DST_PORT = 29113;
     private static final long TEST_COOKIE1 = 43387759684916L;
     private static final long TEST_COOKIE2 = TEST_COOKIE1 + 1;
@@ -133,7 +129,6 @@ public class TcpSocketTrackerTest {
     private TerribleFailureHandler mOldWtfHandler;
     @Mock private Context mContext;
     @Mock private PowerManager mPowerManager;
-    @Mock private ConnectivityManager mCm;
 
     @Rule
     public final DevSdkIgnoreRule mIgnoreRule = new DevSdkIgnoreRule();
@@ -155,9 +150,7 @@ public class TcpSocketTrackerTest {
 
         when(mNetd.getFwmarkForNetwork(eq(TEST_NETID1)))
                 .thenReturn(makeMarkMaskParcel(NETID_MASK, TEST_NETID1_FWMARK));
-        doReturn(mContext).when(mDependencies).getContext();
         doReturn(mPowerManager).when(mContext).getSystemService(PowerManager.class);
-        doReturn(mCm).when(mContext).getSystemService(ConnectivityManager.class);
     }
 
     @After
@@ -271,7 +264,7 @@ public class TcpSocketTrackerTest {
         testLp.addDnsServer(TEST_DNS1);
         tst.setLinkProperties(testLp);
         doReturn(getByteBufferFromHexString(composeSockDiagTcpHex(9, 10)
-                + composeSockDiagTcpHex(9, 10, DNS_OVER_TLS_PORT, TEST_COOKIE2, TEST_UID1)
+                + composeSockDiagTcpHex(9, 10, DNS_OVER_TLS_PORT, TEST_COOKIE2)
                 + NLMSG_DONE_HEX))
                 .when(mDependencies).recvMessage(any());
         assertTrue(tst.pollSocketsInfo());
@@ -289,7 +282,7 @@ public class TcpSocketTrackerTest {
         testLp.addValidatedPrivateDnsServer(TEST_DNS1);
         tst.setLinkProperties(testLp);
         doReturn(getByteBufferFromHexString(composeSockDiagTcpHex(10, 12)
-                + composeSockDiagTcpHex(11, 12, DNS_OVER_TLS_PORT, TEST_COOKIE2, TEST_UID1)
+                + composeSockDiagTcpHex(11, 12, DNS_OVER_TLS_PORT, TEST_COOKIE2)
                 + NLMSG_DONE_HEX))
                 .when(mDependencies).recvMessage(any());
         assertTrue(tst.pollSocketsInfo());
@@ -303,7 +296,7 @@ public class TcpSocketTrackerTest {
         // polling cycle.
         tst.setOpportunisticMode(false);
         doReturn(getByteBufferFromHexString(composeSockDiagTcpHex(11, 14)
-                + composeSockDiagTcpHex(13, 14, DNS_OVER_TLS_PORT, TEST_COOKIE2, TEST_UID1)
+                + composeSockDiagTcpHex(13, 14, DNS_OVER_TLS_PORT, TEST_COOKIE2)
                 + NLMSG_DONE_HEX))
                 .when(mDependencies).recvMessage(any());
         assertTrue(tst.pollSocketsInfo());
@@ -313,76 +306,6 @@ public class TcpSocketTrackerTest {
         assertFalse(tst.isDataStallSuspected());
     }
 
-    @IgnoreAfter(Build.VERSION_CODES.S_V2)
-    @Test
-    public void testPollSocketsInfo_ignoreBlockedUid_featureDisabled_beforeT() throws Exception {
-        doTestPollSocketsInfo_ignoreBlockedUid_featureDisabled();
-    }
-
-    @IgnoreUpTo(Build.VERSION_CODES.S_V2)
-    @Test
-    public void testPollSocketsInfo_ignoreBlockedUid_featureDisabled_TOrAbove() throws Exception {
-        doTestPollSocketsInfo_ignoreBlockedUid_featureDisabled();
-        verify(mCm, never()).isUidNetworkingBlocked(anyInt(), anyBoolean());
-    }
-
-    private void doTestPollSocketsInfo_ignoreBlockedUid_featureDisabled() throws Exception {
-        doReturn(false).when(mDependencies).shouldIgnoreTcpInfoForBlockedUids();
-        final TcpSocketTracker tst = new TcpSocketTracker(mDependencies, mNetwork);
-        // Simulate 1 message with data stall happened.
-        doReturn(getByteBufferFromHexString(
-                composeSockDiagTcpHex(4, 10) + NLMSG_DONE_HEX))
-                .when(mDependencies).recvMessage(any());
-        assertTrue(tst.pollSocketsInfo());
-        // 4 retran / 10 sent = 40 percent.
-        assertEquals(40, tst.getLatestPacketFailPercentage());
-        assertEquals(10, tst.getSentSinceLastRecv());
-        assertFalse(tst.isDataStallSuspected());
-
-        // With the feature disabled, append another message with blocked uid, verify the
-        // traffic of networking-blocked uid is not filtered.
-        doReturn(getByteBufferFromHexString(composeSockDiagTcpHex(9, 10)
-                + composeSockDiagTcpHex(5, 10, DNS_OVER_TLS_PORT, TEST_COOKIE2, TEST_UID2)
-                + NLMSG_DONE_HEX))
-                .when(mDependencies).recvMessage(any());
-        assertTrue(tst.pollSocketsInfo());
-        // 5 + 5 retrans / 10 sent = 100 percent.
-        assertEquals(100, tst.getLatestPacketFailPercentage());
-        assertEquals(20, tst.getSentSinceLastRecv());
-        assertTrue(tst.isDataStallSuspected());
-    }
-
-    // The feature is not enabled on pre-T device, because it needs bpf support.
-    @IgnoreUpTo(Build.VERSION_CODES.S_V2)
-    @Test
-    public void testPollSocketsInfo_ignoreBlockedUid_featureEnabled() throws Exception {
-        doReturn(true).when(mDependencies).shouldIgnoreTcpInfoForBlockedUids();
-        final TcpSocketTracker tst = new TcpSocketTracker(mDependencies, mNetwork);
-        doReturn(true).when(mCm).isUidNetworkingBlocked(TEST_UID2, false /* metered */);
-        // With the feature enabled, append another message with blocked uid, verify the
-        // traffic of networking-blocked uid is filtered out.
-        doReturn(getByteBufferFromHexString(composeSockDiagTcpHex(4, 10)
-                + composeSockDiagTcpHex(6, 12, DNS_OVER_TLS_PORT, TEST_COOKIE2, TEST_UID2)
-                + NLMSG_DONE_HEX))
-                .when(mDependencies).recvMessage(any());
-        assertTrue(tst.pollSocketsInfo());
-        assertEquals(40, tst.getLatestPacketFailPercentage());
-        assertEquals(10, tst.getSentSinceLastRecv());
-        assertFalse(tst.isDataStallSuspected());
-
-        // Unblock traffic of the uid, verify the traffic of the uid is not filtered.
-        doReturn(false).when(mCm).isUidNetworkingBlocked(TEST_UID2, false /* metered */);
-        doReturn(getByteBufferFromHexString(composeSockDiagTcpHex(4, 10)
-                + composeSockDiagTcpHex(8, 14, DNS_OVER_TLS_PORT, TEST_COOKIE2, TEST_UID2)
-                + NLMSG_DONE_HEX))
-                .when(mDependencies).recvMessage(any());
-        assertTrue(tst.pollSocketsInfo());
-        // Lost 2 / 2 sent = 100 percent.
-        assertEquals(100, tst.getLatestPacketFailPercentage());
-        assertEquals(12, tst.getSentSinceLastRecv());
-        assertTrue(tst.isDataStallSuspected());
-    }
-
     @Test
     public void testTcpInfoParsingWithMultipleMsgs() throws Exception {
         final TcpSocketTracker tst = new TcpSocketTracker(mDependencies, mNetwork);
@@ -547,11 +470,10 @@ public class TcpSocketTrackerTest {
     }
 
     private static String composeSockDiagTcpHex(int retrans, int sent) {
-        return composeSockDiagTcpHex(retrans, sent, TEST_DST_PORT, TEST_COOKIE1, TEST_UID1);
+        return composeSockDiagTcpHex(retrans, sent, TEST_DST_PORT, TEST_COOKIE1);
     }
 
-    private static String composeSockDiagTcpHex(int retrans, int sent, short dstPort,
-            long cookie, int uid) {
+    private static String composeSockDiagTcpHex(int retrans, int sent, short dstPort, long cookie) {
         return // struct nlmsghdr.
                 "14010000"          // length = 276
                 + "1400"            // type = SOCK_DIAG_BY_FAMILY
@@ -565,17 +487,17 @@ public class TcpSocketTrackerTest {
                 + "00"              // retrans
                 // inet_diag_sockid: ports and addresses are always in big endian,
                 // see StructInetDiagSockId.
-                + "DEA5"                                                // idiag_sport = 56997
-                + getHexStringFromShort(dstPort, ByteOrder.BIG_ENDIAN)  // idiag_dport
-                + "0a006402000000000000000000000000"                    // idiag_src = 10.0.100.2
-                + "08080808000000000000000000000000"                    // idiag_dst = 8.8.8.8
-                + "00000000"                                            // idiag_if
-                + getHexStringFromLong(cookie)                          // idiag_cookie
-                + "00000000"                                            // idiag_expires
-                + "00000000"                                            // idiag_rqueue
-                + "00000000"                                            // idiag_wqueue
-                + getHexStringFromInt(uid)                              // idiag_uid
-                + "00000000"                                            // idiag_inode
+                + "DEA5"                                               // idiag_sport = 56997
+                + getHexStringFromShort(dstPort, ByteOrder.BIG_ENDIAN) // idiag_dport
+                + "0a006402000000000000000000000000"                   // idiag_src = 10.0.100.2
+                + "08080808000000000000000000000000"                   // idiag_dst = 8.8.8.8
+                + "00000000"                                           // idiag_if
+                + getHexStringFromLong(cookie)                         // idiag_cookie
+                + "00000000"                                           // idiag_expires
+                + "00000000"                                           // idiag_rqueue
+                + "00000000"                                           // idiag_wqueue
+                + getHexStringFromInt(TEST_UID1)                       // idiag_uid
+                + "00000000"                                           // idiag_inode
                 // rtattr
                 + "0500"            // len = 5
                 + "0800"            // type = 8
-- 
2.25.1

