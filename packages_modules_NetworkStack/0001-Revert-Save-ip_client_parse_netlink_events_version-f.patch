From 9ad8ec466fa91eab7db93a3f462773af8f95e488 Mon Sep 17 00:00:00 2001
From: Yaroslav Zviezda <acroreiser@gmail.com>
Date: Tue, 7 Nov 2023 20:44:43 +0300
Subject: [PATCH 1/3] Revert "Save ip_client_parse_netlink_events_version flag
 value at initialization."

This reverts commit f0d09191292c8a18699c8a318eb518c3d84adc2c.
---
 src/android/net/ip/IpClientLinkObserver.java | 34 +++++++++++---------
 1 file changed, 18 insertions(+), 16 deletions(-)

diff --git a/src/android/net/ip/IpClientLinkObserver.java b/src/android/net/ip/IpClientLinkObserver.java
index bd4095b1..25978ab7 100644
--- a/src/android/net/ip/IpClientLinkObserver.java
+++ b/src/android/net/ip/IpClientLinkObserver.java
@@ -159,7 +159,6 @@ public class IpClientLinkObserver implements NetworkObserver {
     private final IpClient.Dependencies mDependencies;
     private final String mClatInterfaceName;
     private final MyNetlinkMonitor mNetlinkMonitor;
-    private final boolean mNetlinkEventParsingEnabled;
 
     private boolean mClatInterfaceExists;
 
@@ -190,8 +189,6 @@ public class IpClientLinkObserver implements NetworkObserver {
         mDnsServerRepository = new DnsServerRepository(config.minRdnssLifetime);
         mAlarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
         mDependencies = deps;
-        mNetlinkEventParsingEnabled = deps.isFeatureEnabled(context,
-                IPCLIENT_PARSE_NETLINK_EVENTS_VERSION, isAtLeastT() /* default value */);
         mNetlinkMonitor = new MyNetlinkMonitor(h, log, mTag);
         mHandler.post(() -> {
             if (!mNetlinkMonitor.start()) {
@@ -227,6 +224,11 @@ public class IpClientLinkObserver implements NetworkObserver {
         }
     }
 
+    private boolean isNetlinkEventParsingEnabled() {
+        return mDependencies.isFeatureEnabled(mContext, IPCLIENT_PARSE_NETLINK_EVENTS_VERSION,
+                isAtLeastT() /* default value */);
+    }
+
     private int getSocketReceiveBufferSize() {
         final int size = mDependencies.getDeviceConfigPropertyInt(CONFIG_SOCKET_RECV_BUFSIZE,
                 SOCKET_RECV_BUFSIZE /* default value */);
@@ -238,7 +240,7 @@ public class IpClientLinkObserver implements NetworkObserver {
 
     @Override
     public void onInterfaceAdded(String iface) {
-        if (mNetlinkEventParsingEnabled) return;
+        if (isNetlinkEventParsingEnabled()) return;
         maybeLog("interfaceAdded", iface);
         if (mClatInterfaceName.equals(iface)) {
             mCallback.onClatInterfaceStateUpdate(true /* add interface */);
@@ -247,7 +249,7 @@ public class IpClientLinkObserver implements NetworkObserver {
 
     @Override
     public void onInterfaceRemoved(String iface) {
-        if (mNetlinkEventParsingEnabled) return;
+        if (isNetlinkEventParsingEnabled()) return;
         maybeLog("interfaceRemoved", iface);
         if (mClatInterfaceName.equals(iface)) {
             mCallback.onClatInterfaceStateUpdate(false /* remove interface */);
@@ -258,7 +260,7 @@ public class IpClientLinkObserver implements NetworkObserver {
 
     @Override
     public void onInterfaceLinkStateChanged(String iface, boolean state) {
-        if (mNetlinkEventParsingEnabled) return;
+        if (isNetlinkEventParsingEnabled()) return;
         if (!mInterfaceName.equals(iface)) return;
         maybeLog("interfaceLinkStateChanged", iface + (state ? " up" : " down"));
         updateInterfaceLinkStateChanged(state);
@@ -266,7 +268,7 @@ public class IpClientLinkObserver implements NetworkObserver {
 
     @Override
     public void onInterfaceAddressUpdated(LinkAddress address, String iface) {
-        if (mNetlinkEventParsingEnabled) return;
+        if (isNetlinkEventParsingEnabled()) return;
         if (!mInterfaceName.equals(iface)) return;
         maybeLog("addressUpdated", iface, address);
         updateInterfaceAddress(address, true /* add address */);
@@ -274,7 +276,7 @@ public class IpClientLinkObserver implements NetworkObserver {
 
     @Override
     public void onInterfaceAddressRemoved(LinkAddress address, String iface) {
-        if (mNetlinkEventParsingEnabled) return;
+        if (isNetlinkEventParsingEnabled()) return;
         if (!mInterfaceName.equals(iface)) return;
         maybeLog("addressRemoved", iface, address);
         updateInterfaceAddress(address, false /* remove address */);
@@ -282,7 +284,7 @@ public class IpClientLinkObserver implements NetworkObserver {
 
     @Override
     public void onRouteUpdated(RouteInfo route) {
-        if (mNetlinkEventParsingEnabled) return;
+        if (isNetlinkEventParsingEnabled()) return;
         if (!mInterfaceName.equals(route.getInterface())) return;
         maybeLog("routeUpdated", route);
         updateInterfaceRoute(route, true /* add route */);
@@ -290,7 +292,7 @@ public class IpClientLinkObserver implements NetworkObserver {
 
     @Override
     public void onRouteRemoved(RouteInfo route) {
-        if (mNetlinkEventParsingEnabled) return;
+        if (isNetlinkEventParsingEnabled()) return;
         if (!mInterfaceName.equals(route.getInterface())) return;
         maybeLog("routeRemoved", route);
         updateInterfaceRoute(route, false /* remove route */);
@@ -298,7 +300,7 @@ public class IpClientLinkObserver implements NetworkObserver {
 
     @Override
     public void onInterfaceDnsServerInfo(String iface, long lifetime, String[] addresses) {
-        if (mNetlinkEventParsingEnabled) return;
+        if (isNetlinkEventParsingEnabled()) return;
         if (!mInterfaceName.equals(iface)) return;
         updateInterfaceDnsServerInfo(lifetime, addresses);
     }
@@ -430,7 +432,7 @@ public class IpClientLinkObserver implements NetworkObserver {
 
         MyNetlinkMonitor(Handler h, SharedLog log, String tag) {
             super(h, log, tag, OsConstants.NETLINK_ROUTE,
-                    !mNetlinkEventParsingEnabled
+                    !isNetlinkEventParsingEnabled()
                         ? NetlinkConstants.RTMGRP_ND_USEROPT
                         : (NetlinkConstants.RTMGRP_ND_USEROPT | NetlinkConstants.RTMGRP_LINK
                                 | NetlinkConstants.RTMGRP_IPV4_IFADDR
@@ -543,7 +545,7 @@ public class IpClientLinkObserver implements NetworkObserver {
         }
 
         private void processRdnssOption(StructNdOptRdnss opt) {
-            if (!mNetlinkEventParsingEnabled) return;
+            if (!isNetlinkEventParsingEnabled()) return;
             final String[] addresses = new String[opt.servers.length];
             for (int i = 0; i < opt.servers.length; i++) {
                 final Inet6Address addr = isIpv6LinkLocalDnsAccepted()
@@ -597,7 +599,7 @@ public class IpClientLinkObserver implements NetworkObserver {
         }
 
         private void processRtNetlinkLinkMessage(RtNetlinkLinkMessage msg) {
-            if (!mNetlinkEventParsingEnabled) return;
+            if (!isNetlinkEventParsingEnabled()) return;
 
             // Check if receiving netlink link state update for clat interface.
             final String ifname = msg.getInterfaceName();
@@ -631,7 +633,7 @@ public class IpClientLinkObserver implements NetworkObserver {
         }
 
         private void processRtNetlinkAddressMessage(RtNetlinkAddressMessage msg) {
-            if (!mNetlinkEventParsingEnabled) return;
+            if (!isNetlinkEventParsingEnabled()) return;
 
             final StructIfaddrMsg ifaddrMsg = msg.getIfaddrHeader();
             if (ifaddrMsg.index != mIfindex) return;
@@ -656,7 +658,7 @@ public class IpClientLinkObserver implements NetworkObserver {
         }
 
         private void processRtNetlinkRouteMessage(RtNetlinkRouteMessage msg) {
-            if (!mNetlinkEventParsingEnabled) return;
+            if (!isNetlinkEventParsingEnabled()) return;
             if (msg.getInterfaceIndex() != mIfindex) return;
             // Ignore the unsupported route protocol and non-global unicast routes.
             if (!isSupportedRouteProtocol(msg)
-- 
2.25.1

