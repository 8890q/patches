From ffaf2ce7585108f13f6a11d01630aab693f033d0 Mon Sep 17 00:00:00 2001
From: ivanmeler <i_ivan@windowslive.com>
Date: Mon, 21 Mar 2022 21:16:56 +0000
Subject: [PATCH] Revert "Keystore 2.0: Add CREATE_DATETIME unconditionally."

This reverts commit b6bff12bafc19f44d8cfd1897603523362c62929.
---
 keystore2/src/security_level.rs | 53 ++++++++-------------------------
 1 file changed, 13 insertions(+), 40 deletions(-)

diff --git a/keystore2/src/security_level.rs b/keystore2/src/security_level.rs
index 1b2e348..5cb3afc 100644
--- a/keystore2/src/security_level.rs
+++ b/keystore2/src/security_level.rs
@@ -54,11 +54,9 @@ use android_system_keystore2::aidl::android::system::keystore2::{
     Domain::Domain, EphemeralStorageKeyResponse::EphemeralStorageKeyResponse,
     IKeystoreOperation::IKeystoreOperation, IKeystoreSecurityLevel::BnKeystoreSecurityLevel,
     IKeystoreSecurityLevel::IKeystoreSecurityLevel, KeyDescriptor::KeyDescriptor,
-    KeyMetadata::KeyMetadata, KeyParameters::KeyParameters, ResponseCode::ResponseCode,
+    KeyMetadata::KeyMetadata, KeyParameters::KeyParameters,
 };
 use anyhow::{anyhow, Context, Result};
-use std::convert::TryInto;
-use std::time::SystemTime;
 
 /// Implementation of the IKeystoreSecurityLevel Interface.
 pub struct KeystoreSecurityLevel {
@@ -388,50 +386,25 @@ impl KeystoreSecurityLevel {
         })
     }
 
-    fn add_required_parameters(
+    fn add_certificate_parameters(
         &self,
         uid: u32,
         params: &[KeyParameter],
         key: &KeyDescriptor,
     ) -> Result<Vec<KeyParameter>> {
         let mut result = params.to_vec();
-
-        // Unconditionally add the CREATION_DATETIME tag and prevent callers from
-        // specifying it.
-        if params.iter().any(|kp| kp.tag == Tag::CREATION_DATETIME) {
-            return Err(Error::Rc(ResponseCode::INVALID_ARGUMENT)).context(
-                "In KeystoreSecurityLevel::add_required_parameters: \
-                Specifying Tag::CREATION_DATETIME is not allowed.",
-            );
-        }
-
-        result.push(KeyParameter {
-            tag: Tag::CREATION_DATETIME,
-            value: KeyParameterValue::DateTime(
-                SystemTime::now()
-                    .duration_since(SystemTime::UNIX_EPOCH)
-                    .context(
-                        "In KeystoreSecurityLevel::add_required_parameters: \
-                        Failed to get epoch time.",
-                    )?
-                    .as_millis()
-                    .try_into()
-                    .context(
-                        "In KeystoreSecurityLevel::add_required_parameters: \
-                        Failed to convert epoch time.",
-                    )?,
-            ),
-        });
-
         // If there is an attestation challenge we need to get an application id.
         if params.iter().any(|kp| kp.tag == Tag::ATTESTATION_CHALLENGE) {
             let aaid = {
                 let _wp = self.watch_millis(
-                    "In KeystoreSecurityLevel::add_required_parameters calling: get_aaid",
+                    "In KeystoreSecurityLevel::add_certificate_parameters calling: get_aaid",
                     500,
                 );
                 keystore2_aaid::get_aaid(uid).map_err(|e| {
-                    anyhow!(format!("In add_required_parameters: get_aaid returned status {}.", e))
+                    anyhow!(format!(
+                        "In add_certificate_parameters: get_aaid returned status {}.",
+                        e
+                    ))
                 })
             }?;
 
@@ -443,13 +416,13 @@ impl KeystoreSecurityLevel {
 
         if params.iter().any(|kp| kp.tag == Tag::INCLUDE_UNIQUE_ID) {
             check_key_permission(KeyPerm::gen_unique_id(), key, &None).context(concat!(
-                "In add_required_parameters: ",
+                "In add_certificate_parameters: ",
                 "Caller does not have the permission to generate a unique ID"
             ))?;
             if self.id_rotation_state.had_factory_reset_since_id_rotation().context(
-                "In add_required_parameters: Call to had_factory_reset_since_id_rotation failed.",
+                "In add_certificate_parameters: Call to had_factory_reset_since_id_rotation failed."
             )? {
-                result.push(KeyParameter {
+                result.push(KeyParameter{
                     tag: Tag::RESET_SINCE_ID_ROTATION,
                     value: KeyParameterValue::BoolValue(true),
                 })
@@ -460,7 +433,7 @@ impl KeystoreSecurityLevel {
         // correct Android permission.
         if params.iter().any(|kp| is_device_id_attestation_tag(kp.tag)) {
             check_device_attestation_permissions().context(concat!(
-                "In add_required_parameters: ",
+                "In add_certificate_parameters: ",
                 "Caller does not have the permission to attest device identifiers."
             ))?;
         }
@@ -532,7 +505,7 @@ impl KeystoreSecurityLevel {
                 .context("In generate_key: Trying to get an attestation key")?,
         };
         let params = self
-            .add_required_parameters(caller_uid, params, &key)
+            .add_certificate_parameters(caller_uid, params, &key)
             .context("In generate_key: Trying to get aaid.")?;
 
         let km_dev: Strong<dyn IKeyMintDevice> = self.keymint.get_interface()?;
@@ -633,7 +606,7 @@ impl KeystoreSecurityLevel {
         check_key_permission(KeyPerm::rebind(), &key, &None).context("In import_key.")?;
 
         let params = self
-            .add_required_parameters(caller_uid, params, &key)
+            .add_certificate_parameters(caller_uid, params, &key)
             .context("In import_key: Trying to get aaid.")?;
 
         let format = params
-- 
2.25.1

